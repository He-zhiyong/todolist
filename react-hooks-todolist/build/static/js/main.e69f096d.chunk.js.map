{"version":3,"sources":["components/AddTodo.tsx","components/Todo.tsx","components/TodoList.tsx","components/FilterTodo.tsx","components/TodoListApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddTodo","props","className","type","placeholder","autoFocus","onKeyDown","event","keyCode","preventDefault","newTodo","target","newTodoText","value","trim","onAddTodo","TodoComponent","todo","todoBeingEdited","onToggleTodo","onStartEditTodo","onEndEditTodo","onCancelEditTodo","onDestroyTodo","editField","useEffect","focus","handleSubmit","destroy","text","completed","join","checked","onChange","onDoubleClick","onClick","ref","input","onBlur","which","TodoList","totalCount","visibleTodos","activeTodoCount","onToggleAllTodo","style","id","htmlFor","map","Todo","key","FilterTodo","visibilityFilter","completedTodoCount","onFilterChange","onClearCompletedTodo","renderFilter","filterName","caption","TodoListApp","window","onbeforeunload","localStorage","setItem","JSON","stringify","todos","useState","parse","getItem","setTodos","setVisibilityFilter","setTodoBeingEdited","setVisibleTodos","setActiveTodoCount","setCompletedTodoCount","filter","reduce","sum","length","Date","now","toString","handleToggleTodo","handleToggleAllTodo","handleStartEditTodo","forEach","handleEndEditTodo","handleDestroyTodo","handleFilterChange","href","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e69f096d.chunk.js","sourcesContent":["import React from 'react'\nimport { Todo } from './types'\n\nconst ENTER_KEY = 13\ninterface Props {\n  onAddTodo: (text: Todo['text']) => void\n}\nconst AddTodo: React.FC<Props> = (props: Props) => {\n  const handleAddTodoKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.keyCode !== ENTER_KEY) return\n    event.preventDefault()\n    const newTodo = event.target as HTMLInputElement\n    const newTodoText = newTodo.value.trim()\n    if (newTodoText.trim()) {\n      props.onAddTodo(newTodoText)\n      newTodo.value = ''\n    }\n  }\n\n  return (\n    <input \n      className=\"new-todo\"\n      type=\"text\"\n      placeholder=\"What needs to be done?\"\n      autoFocus={true}\n      onKeyDown={handleAddTodoKeyDown}\n    />\n  )\n}\n\nexport default AddTodo","import React, { useEffect } from 'react'\nimport { Todo, State } from './types'\n\nconst ESCAPE_KEY = 27\nconst ENTER_KEY = 13\n\ninterface Props {\n  key: string\n  todo: Todo\n  todoBeingEdited: State['todoBeingEdited']\n  onToggleTodo: () => void\n  onStartEditTodo: () => void\n  onEndEditTodo: (text: Todo['text']) => void\n  onCancelEditTodo: () => void\n  onDestroyTodo: () => void\n}\nconst TodoComponent: React.FC<Props> = (props: Props) => { \n  const { todo, todoBeingEdited, onToggleTodo, onStartEditTodo, onEndEditTodo, onCancelEditTodo, onDestroyTodo } = props\n  let editField: HTMLInputElement | null = null\n\n  useEffect(() => {\n    if (todoBeingEdited) editField!.focus()\n    return () => {}\n  }, [editField, todoBeingEdited])\n\n  const handleEditTodo = () => {\n    editField!.value = todo.text\n    onStartEditTodo()\n  }\n  const handleSubmit = (destroy?: boolean) => {\n    let text = editField!.value.trim()\n\t\tif (text) {\n\t\t\tonEndEditTodo(text)\n\t\t} else if (destroy) {\n\t\t\tonDestroyTodo()\n\t\t}\n  }\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.which === ESCAPE_KEY) {\n\t\t\tonCancelEditTodo()\n\t\t} else if (event.which === ENTER_KEY) {\n\t\t\thandleSubmit(true)\n\t\t}\n  }\n\n  return (\n    <li className={[\n      todo.completed ? \"completed\" : \"\",\n      todo === todoBeingEdited ? \"editing\" : \"\"\n    ].join(\" \")}>\n      <div className=\"view\">\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={todo.completed}\n          onChange={onToggleTodo}\n        />\n        <label onDoubleClick={handleEditTodo}>\n          {todo.text}\n        </label>\n        <button className=\"destroy\" onClick={onDestroyTodo} />\n      </div>\n      <input\n        ref={input => editField = input}\n        className=\"edit\"\n        autoFocus={true} \n        onBlur={() => handleSubmit()}\n        onKeyDown={handleKeyDown}\n      />\n    </li>\n  )\n}\n\nexport default TodoComponent","import React from 'react'\nimport TodoComponent from './Todo'\nimport { Todo, State } from './types'\n\ninterface Props {\n  totalCount: number\n  visibleTodos: State['todos']\n  todoBeingEdited: State['todoBeingEdited']\n  activeTodoCount: State['activeTodoCount']\n  onToggleTodo: (id: Todo['id']) => void\n  onToggleAllTodo: (checked: boolean) => void\n  onStartEditTodo: (todo: Todo) => void\n  onEndEditTodo: (id: Todo['id'], text: Todo['text']) => void\n  onCancelEditTodo: () => void\n  onDestroyTodo: (id: Todo['id']) => void\n}\nconst TodoList: React.FC<Props> = (props: Props) => {\n  const { totalCount, visibleTodos, todoBeingEdited, activeTodoCount, onToggleTodo, onToggleAllTodo, onStartEditTodo, onEndEditTodo, onCancelEditTodo, onDestroyTodo } = props\n\n  const handleToggleAllTodo = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let checked = event.target.checked\n    onToggleAllTodo(checked)\n  }\n  return (\n    <section className=\"main\" style={{'display': totalCount > 0 ? 'block':'none' }}>\n        <input\n          id=\"toggleAll\"\n          className=\"toggle-all\"\n          type=\"checkbox\"\n          onChange={handleToggleAllTodo}\n          checked={activeTodoCount === 0}\n        />\n        <label htmlFor=\"toggleAll\"></label>\n        <ul className=\"todo-list\">\n          {visibleTodos.map(todo =>\n            <TodoComponent \n              key={todo.id}\n              todo={todo}\n              todoBeingEdited={todoBeingEdited}\n              onToggleTodo={() => onToggleTodo(todo.id)} \n              onStartEditTodo={() => onStartEditTodo(todo)} \n              onEndEditTodo={(text) => onEndEditTodo(todo.id,text)} \n              onCancelEditTodo={() => onCancelEditTodo()}\n              onDestroyTodo={() => onDestroyTodo(todo.id)} \n            />\n          )}\n        </ul>\n      </section>\n  )\n}\n\nexport default TodoList","import React from 'react'\nimport { State } from './types'\n\ninterface Props {\n  visibilityFilter: State['visibilityFilter']\n  activeTodoCount: State['activeTodoCount']\n  completedTodoCount: State['completedTodoCount']\n  onFilterChange: (filterName: State['visibilityFilter']) => void\n  onClearCompletedTodo: () => void\n}\nconst FilterTodo: React.FC<Props> = (props: Props) => {\n  const { visibilityFilter, activeTodoCount, completedTodoCount, onFilterChange, onClearCompletedTodo } = props\n  if (!activeTodoCount && !completedTodoCount) return null\n\n  \n  const renderFilter = (filterName: State['visibilityFilter'], caption: string) => {\n    return (\n\t\t\t<li>\n        <a\n          onClick={() => onFilterChange(filterName)}\n          className={filterName === visibilityFilter ? \"selected\" : \"\"}>\n\t\t\t\t\t{caption}\n\t\t\t\t</a>\n\t\t\t\t{' '}\n\t\t\t</li>\n\t\t)\n  }\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{activeTodoCount}</strong> {activeTodoCount > 1 ? 'items' : 'item'} left\n      </span>\n      <ul className=\"filters\">\n        {renderFilter('all', 'All')}\n        {renderFilter('active', 'Active')}\n        {renderFilter('completed', 'Completed')}\n      </ul>\n      {completedTodoCount === 0\n        ? null\n        : <button\n            className=\"clear-completed\"\n            onClick={onClearCompletedTodo}>\n            Clear completed\n          </button>\n      }\n    </footer>\n  )\n}\n\nexport default FilterTodo","import 'todomvc-app-css/index.css'\nimport React, { useState, useEffect } from 'react'\nimport { Todo, State } from './types'\nimport AddTodo from './AddTodo'\nimport TodoList from './TodoList'\nimport FilterTodo from './FilterTodo'\n\nconst TodoListApp: React.FC = () => {\n  const getLocalStorageTodos = () => {\n    let todos: Todo[] = JSON.parse(localStorage.getItem('todos') || '[]')\n    return todos\n  }\n  window.onbeforeunload = () => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }\n  const [ todos, setTodos ] = useState<Todo[]>(getLocalStorageTodos())\n  const [ visibilityFilter, setVisibilityFilter ] = useState<State['visibilityFilter']>('all')\n  const [ todoBeingEdited, setTodoBeingEdited ] = useState<State['todoBeingEdited']>(null)\n  const [ visibleTodos, setVisibleTodos ] = useState<Todo[]>([])\n  const [ activeTodoCount, setActiveTodoCount ] = useState<State['activeTodoCount']>(0)\n  const [ completedTodoCount, setCompletedTodoCount ] = useState<State['completedTodoCount']>(0)\n\n  useEffect(() => {\n    setVisibleTodos(() => {\n      switch (visibilityFilter) {\n        case 'all':\n          return todos\n        case 'active':\n          return todos.filter((todo: Todo) => !todo.completed)\n        case 'completed':\n          return todos.filter((todo: Todo) => todo.completed)\n        default:\n          return todos\n      }\n    })\n    setActiveTodoCount(todos.reduce(\n\t\t\t(sum, todo) => sum + (todo.completed ? 0 : 1),\n\t\t\t0\n    ))\n    setCompletedTodoCount(todos.length - todos.reduce(\n\t\t\t(sum, todo) => sum + (todo.completed ? 0 : 1),\n\t\t\t0\n    ))\n  }, [todos, visibilityFilter])\n\n  const handleAddTodo = (text: Todo['text']) => {\n    setTodos(() => [\n      ...todos,\n      {\n        text,\n        id: Date.now().toString(),\n        completed: false\n      }\n    ])\n  }\n  const handleToggleTodo = (id: Todo['id']) => {\n    setTodos(todos => todos.map<Todo>(todo => {\n      if (todo.id === id) todo.completed = !todo.completed\n      return {\n        ...todo\n      }\n    }))\n  }\n  const handleToggleAllTodo = (checked: boolean) => {\n    setTodos(todos => todos.map<Todo>(todo => {\n      todo.completed = checked\n      return {\n        ...todo\n      }\n    }))\n  }\n  const handleStartEditTodo = (todo: Todo) => {\n    setTodoBeingEdited(todo)\n  }\n  const handleEndEditTodo = (id: Todo['id'], text: Todo['text']) => {\n    setTodos(todos => {\n      todos.forEach(todo => {\n        if(todo.id === id){\n          todo.text = text\n        }\n      })\n      return todos\n    })\n    setTodoBeingEdited(null)\n  }\n  const handleCancelEditTodo = () => {\n    setTodoBeingEdited(null)\n  }\n  const handleDestroyTodo = (id: Todo['id']) => {\n    setTodos(todos => todos.filter(\n      todo => todo.id !== id\n    ))\n  }\n  const handleFilterChange = (filterName: State['visibilityFilter']) => {\n    setVisibilityFilter(filterName)\n  }\n  const handleClearCompletedTodo = () => {\n    setTodos(todos => todos.filter(\n      todo => todo.completed === false\n    ))\n  }\n\n  return (\n    <div className=\"App\">\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todolist</h1>\n          <AddTodo onAddTodo={handleAddTodo}/>\n        </header>\n        <TodoList \n          totalCount={todos.length}\n          visibleTodos={visibleTodos}\n          todoBeingEdited={todoBeingEdited}\n          activeTodoCount={activeTodoCount}\n          onToggleTodo={id =>\n            handleToggleTodo(id)\n          }\n          onToggleAllTodo={(checked) =>\n            handleToggleAllTodo(checked)\n          }\n          onStartEditTodo={(todo) =>\n            handleStartEditTodo(todo)\n          }\n          onEndEditTodo={(id,text) =>\n            handleEndEditTodo(id,text)\n          }\n          onCancelEditTodo={() =>\n            handleCancelEditTodo()\n          }\n          onDestroyTodo={id =>\n            handleDestroyTodo(id)\n          } \n        />\n        <FilterTodo \n          visibilityFilter={visibilityFilter}\n          activeTodoCount={activeTodoCount}\n          completedTodoCount={completedTodoCount}\n          onFilterChange={filterName =>\n            handleFilterChange(filterName)\n          }\n          onClearCompletedTodo={() => \n            handleClearCompletedTodo()\n          } \n        />\n      </section>\n      \n      <footer className=\"info\">\n        <p>Double-click to edit a todo</p>\n        <p>TodoList based on react</p>\n        <p>Source: \n          <a href=\"https://github.com/he-zhiyong/todolist/tree/master/react-hooks-todolist\"> GitHub </a>or\n          <a href=\"https://gitee.com/he-zhiyong/todolist/tree/master/react-hooks-todolist\"> Gitee </a>\n        </p>\n      </footer>\n    </div>\n  )\n}\n\nexport default TodoListApp","import React from 'react'\nimport TodoListApp from './components/TodoListApp'\n\nconst App: React.FC = () => {\n  return (\n    <TodoListApp/>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}